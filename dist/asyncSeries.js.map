{"version":3,"file":"asyncSeries.js","sources":["../index.js"],"sourcesContent":["/**\n * Asynchronously process a list of items, consecutively.\n *\n * @param Array array\n * @param Function(value, index, array) iteratee\n *\n * @return Promise resolve when done, reject on first error\n * @version 1.0.1\n */\nexport function forEach(array, iteratee) {\n    const { length } = array;\n    let index = -1;\n\n    return Promise.resolve()\n    .then(function _proc() {\n        ++index;\n        if(index < length) {\n            return Promise.resolve(iteratee.call(array, array[index], index, array))\n                .then(_proc)\n            ;\n        }\n    });\n}\n\n/**\n * Asynchronously map a list of items, consecutively.\n *\n * @param Array array\n * @param Function(value, index, array, prevValue) iteratee\n * @param any firstValue The `prevValue` of first call to iteratee\n *\n * @return Promise(array) array mapped, reject on first error\n * @version 1.0.1\n */\nexport function map(array, iteratee, firstValue) {\n    const result = [];\n    const { length } = array;\n    let index = -1;\n\n    return Promise.resolve(firstValue)\n    .then(function _proc(prevValue) {\n        if(index >= 0) {\n            result[index] = prevValue;\n        }\n        ++index;\n        if(index < length) {\n            return Promise.resolve(iteratee.call(array, array[index], index, array, prevValue))\n                .then(_proc)\n            ;\n        }\n        return result;\n    });\n}\n\n/**\n * Asynchronously reduce a list of items, consecutively.\n *\n * @param Array array\n * @param Function(accumulator, currentValue, index, array) reducer\n * @param any initialValue\n *\n * @return Promise(any) resolve to the last returned value when done, reject on first error\n * @version 1.0.1\n */\nexport function reduce(array, reducer, initialValue) {\n    const { length } = array;\n    let index = -1;\n    if(arguments.length < 3) {\n        initialValue = array[0];\n        ++index;\n    }\n\n    return Promise.resolve(initialValue)\n    .then(function _proc(accumulator) {\n        ++index;\n        if(index < length) {\n            return Promise.resolve(reducer.call(array, accumulator, array[index], index, array))\n                .then(_proc)\n            ;\n        }\n        return accumulator;\n    });\n}\n"],"names":["forEach","array","iteratee","length","index","Promise","resolve","then","_proc","call","map","firstValue","result","prevValue","reduce","reducer","initialValue","arguments","accumulator"],"mappings":";;;;;;IAAA;;;;;;;;;IASO,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,QAAxB,EAAkC;IACrC,QAAM;IAAEC,IAAAA;IAAF,MAAaF,KAAnB;IACA,MAAIG,KAAK,GAAG,CAAC,CAAb;IAEA,SAAOC,OAAO,CAACC,OAAR,GACNC,IADM,CACD,SAASC,KAAT,GAAiB;IACnB,MAAEJ,KAAF;;IACA,QAAGA,KAAK,GAAGD,MAAX,EAAmB;IACf,aAAOE,OAAO,CAACC,OAAR,CAAgBJ,QAAQ,CAACO,IAAT,CAAcR,KAAd,EAAqBA,KAAK,CAACG,KAAD,CAA1B,EAAmCA,KAAnC,EAA0CH,KAA1C,CAAhB,EACFM,IADE,CACGC,KADH,CAAP;IAGH;IACJ,GARM,CAAP;IASH;IAED;;;;;;;;;;;IAUO,SAASE,GAAT,CAAaT,KAAb,EAAoBC,QAApB,EAA8BS,UAA9B,EAA0C;IAC7C,QAAMC,MAAM,GAAG,EAAf;IACA,QAAM;IAAET,IAAAA;IAAF,MAAaF,KAAnB;IACA,MAAIG,KAAK,GAAG,CAAC,CAAb;IAEA,SAAOC,OAAO,CAACC,OAAR,CAAgBK,UAAhB,EACNJ,IADM,CACD,SAASC,KAAT,CAAeK,SAAf,EAA0B;IAC5B,QAAGT,KAAK,IAAI,CAAZ,EAAe;IACXQ,MAAAA,MAAM,CAACR,KAAD,CAAN,GAAgBS,SAAhB;IACH;;IACD,MAAET,KAAF;;IACA,QAAGA,KAAK,GAAGD,MAAX,EAAmB;IACf,aAAOE,OAAO,CAACC,OAAR,CAAgBJ,QAAQ,CAACO,IAAT,CAAcR,KAAd,EAAqBA,KAAK,CAACG,KAAD,CAA1B,EAAmCA,KAAnC,EAA0CH,KAA1C,EAAiDY,SAAjD,CAAhB,EACFN,IADE,CACGC,KADH,CAAP;IAGH;;IACD,WAAOI,MAAP;IACH,GAZM,CAAP;IAaH;IAED;;;;;;;;;;;IAUO,SAASE,MAAT,CAAgBb,KAAhB,EAAuBc,OAAvB,EAAgCC,YAAhC,EAA8C;IACjD,QAAM;IAAEb,IAAAA;IAAF,MAAaF,KAAnB;IACA,MAAIG,KAAK,GAAG,CAAC,CAAb;;IACA,MAAGa,SAAS,CAACd,MAAV,GAAmB,CAAtB,EAAyB;IACrBa,IAAAA,YAAY,GAAGf,KAAK,CAAC,CAAD,CAApB;IACA,MAAEG,KAAF;IACH;;IAED,SAAOC,OAAO,CAACC,OAAR,CAAgBU,YAAhB,EACNT,IADM,CACD,SAASC,KAAT,CAAeU,WAAf,EAA4B;IAC9B,MAAEd,KAAF;;IACA,QAAGA,KAAK,GAAGD,MAAX,EAAmB;IACf,aAAOE,OAAO,CAACC,OAAR,CAAgBS,OAAO,CAACN,IAAR,CAAaR,KAAb,EAAoBiB,WAApB,EAAiCjB,KAAK,CAACG,KAAD,CAAtC,EAA+CA,KAA/C,EAAsDH,KAAtD,CAAhB,EACFM,IADE,CACGC,KADH,CAAP;IAGH;;IACD,WAAOU,WAAP;IACH,GATM,CAAP;IAUH;;;;;;;;;;;;;;"}